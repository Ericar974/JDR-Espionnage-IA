# This Swagger documentation provides an overview of the API endpoints available in Hawk Api.
# For a more detailed interactive documentation, visit the `/api-doc` route.
swagger: '2.0'
info:
  title: Hawk Api
  description: API for managing games
  version: '1.0.0'
paths:
  /api/character/images:
    get:
      tags:
        - Characters
      summary: Get all character image URLs
      description: Asynchronously retrieves all image URLs from the characters directory and returns them to the client.
      responses:
        '200':
          description: An array of image URLs.
        '500':
          description: Error reading image directory.

  /api/game/getAll:
    get:
      tags:
        - Game
      summary: Retrieve all games
      description: This route retrieves all games
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved games
          schema:
            type: array
            items:
              $ref: '#/definitions/GameSchema'
        404:
          description: Games not found
          schema:
            $ref: '#/definitions/GetApiError'
        500:
          description: Error fetching games
          schema:
            $ref: '#/definitions/GetApiError'
  /api/game/create:
    post:
      tags:
        - Game
      summary: Create a new game
      description: This route creates a new game with given user IDs.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Object containing the user IDs to create a new game
          schema:
            type: object
            required:
              - userId
            properties:
              userId:
                type: string
          required: true
      responses:
        200:
          description: Successfully created game
          schema:
            type: object
            required:
              - gameId
            properties:
              gameId:
                type: string
        500:
          description: Error creating game
          schema:
            $ref: '#/definitions/GetApiError'
  /api/game/{uuid}:
    get:
      tags:
        - Game
      summary: Retrieve a game by its UUID
      description: This route retrieves a game by its UUID.
      produces:
        - application/json
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: UUID of the game to retrieve
      responses:
        200:
          description: Successfully retrieved game
          schema:
            $ref: '#/definitions/GameSchema'
        404:
          description: Game not found
          schema:
            $ref: '#/definitions/GetApiError'
        500:
          description: Error fetching game by UUID
          schema:
            $ref: '#/definitions/GetApiError'
  /api/game/{uuid}/addUser:
    put:
      tags:
        - Game
      summary: Add user to game by its UUID
      description: This route add user to game by its UUID
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: UUID of the game to retrieve
        - in: body
          name: body
          description: Add user to game
          schema:
            $ref: '#/definitions/UserSchema'
          required: true
      responses:
        200:
          description: Successfully add user
          schema:
            $ref: '#/definitions/GameSchema'
        404:
          description: Game not found
          schema:
            $ref: '#/definitions/GetApiError'
        500:
          description: Error fetching game by UUID
          schema:
            $ref: '#/definitions/GetApiError'
  /api/game/user/{uuid}:
    get:
      tags:
        - Game
      summary: Retrieve user games by user UUID
      description: This route retrieves user games by user UUID
      produces:
        - application/json
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: UUID of the game to retrieve
      responses:
        200:
          description: Successfully retrieved user games
          schema:
            type: array
            items:
              $ref: '#/definitions/GameSchema'
        404:
          description: Game not found
          schema:
            $ref: '#/definitions/GetApiError'
        500:
          description: Error fetching game by UUID
          schema:
            $ref: '#/definitions/GetApiError'
  /api/mission/{uuid}:
    get:
      tags:
        - Mission
      summary: Retrieve a mission by its UUID
      description: This route retrieves a mission by its UUID.
      produces:
        - application/json
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: UUID of the mission to retrieve
      responses:
        200:
          description: Successfully retrieved mission
          schema:
            $ref: '#/definitions/MissionSchema'
        404:
          description: Mission not found
          schema:
            $ref: '#/definitions/GetApiError'
        500:
          description: Error fetching mission by UUID
          schema:
            $ref: '#/definitions/GetApiError'
  /api/mission/getAll:
    get:
      tags:
        - Mission
      summary: Retrieve all missions
      description: This route retrieves all missions
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved missions
          schema:
            type: array
            items:
              $ref: '#/definitions/MissionSchema'
        404:
          description: Missions not found
          schema:
            $ref: '#/definitions/GetApiError'
        500:
          description: Error fetching missions
          schema:
            $ref: '#/definitions/GetApiError'
  /api/scenarios/:
    get:
      tags:
        - Scenarios
      summary: Get all scenarios
      description: Retrieves all scenarios from the database.
      responses:
        200:
          description: An array of scenario objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/ScenariosSchema'
        500:
          description: Error fetching scenarios.
          schema:
            $ref: '#/definitions/GetApiError'

  /api/scenarios/generate-scenario:
    post:
      tags:
        - Scenarios
      summary: Generate a scenario from news
      description: Generates a new scenario based on the latest technology news.
      responses:
        201:
          description: Successfully generated scenario.
          schema:
            $ref: '#/definitions/ScenariosSchema'
        404:
          description: No news articles found.
        500:
          description: Error generating scenario.
          schema:
            $ref: '#/definitions/GetApiError'
  /api/scenarios/{uuid}:
    put:
      tags:
        - Scenarios
      summary: Modify a scenario
      description: Modifies an existing scenario based on user feedback.
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: UUID of the scenario to modify
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              feedback:
                type: string
      responses:
        200:
          description: Successfully updated scenario.
          schema:
            $ref: '#/definitions/ScenariosSchema'
        404:
          description: Scenario not found.
        500:
          description: Error updating scenario.
          schema:
            $ref: '#/definitions/GetApiError'
    get:
      tags:
        - Scenarios
      summary: Get a scenario by UUID
      description: Retrieves a scenario by its UUID.
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: UUID of the scenario to retrieve
      responses:
        200:
          description: Successfully retrieved scenario.
          schema:
            $ref: '#/definitions/ScenariosSchema'
        404:
          description: Scenario not found.
        500:
          description: Error fetching scenario by UUID.
          schema:
            $ref: '#/definitions/GetApiError'



definitions:
  CharacterSchema:
    type: object
    properties:
      id:
        type: string
      userId:
        type: string
      imageUrl:
        type: string
      coverName:
        type: string
      description:
        type: string
      createdAt:
        type: date
      deletedAt:
        type: date
  UserSchema:
    type: object
    properties:
      id:
        type: string
      character:
        $ref: '#/definitions/CharacterSchema'
  MissionSchema:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      country:
        type: string
      scenario:
        type: string
      status:
        type: string
        enum: [Waiting, Playing, Completed]
      place:
        type: string
      date:
        type: string
        format: date-time
  GameSchema:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      status:
        type: string
        enum: [Waiting, Playing, Completed]
      users:
        type: array
        items:
          $ref: '#/definitions/UserSchema'
      missions:
        type: array
        items:
          $ref: '#/definitions/MissionSchema'
      gm:
        $ref: '#/definitions/UserSchema'

  ScenariosSchema:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for the scenario, generated by the system.
      title:
        type: string
        description: Title of the scenario.
      description:
        type: string
        description: Detailed description of the scenario.
      source:
        type: string
        description: Source URL of the scenario, typically where the scenario was generated from.
      publishedDate:
        type: string
        format: date-time
        description: The publication date of the scenario.
      missionId:
        type: string
        description: Optional identifier of the related mission, if applicable.
    required:
      - id
      - title
      - source
      - publishedDate
  GetApiError:
    type: object
    properties:
      message:
        type: string
